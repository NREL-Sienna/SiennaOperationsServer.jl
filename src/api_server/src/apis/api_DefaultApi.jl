# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

function cache_simulation_results_read(handler)
    function cache_simulation_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function cache_simulation_results_validate(handler)
    function cache_simulation_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function cache_simulation_results_invoke(impl; post_invoke=nothing)
    function cache_simulation_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.cache_simulation_results(req::HTTP.Request, openapi_params["id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function cancel_simulation_read(handler)
    function cancel_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function cancel_simulation_validate(handler)
    function cancel_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function cancel_simulation_invoke(impl; post_invoke=nothing)
    function cancel_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.cancel_simulation(req::HTTP.Request, openapi_params["id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_simulation_read(handler)
    function delete_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["name"] =
            OpenAPI.Servers.to_param(String, path_params, "name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_simulation_validate(handler)
    function delete_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function delete_simulation_invoke(impl; post_invoke=nothing)
    function delete_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_simulation(req::HTTP.Request, openapi_params["name"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_simulations_read(handler)
    function delete_simulations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_simulations_validate(handler)
    function delete_simulations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function delete_simulations_invoke(impl; post_invoke=nothing)
    function delete_simulations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_simulations(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_store_read(handler)
    function delete_store_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_store_validate(handler)
    function delete_store_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function delete_store_invoke(impl; post_invoke=nothing)
    function delete_store_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_store(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_system_read(handler)
    function delete_system_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["uuid"] =
            OpenAPI.Servers.to_param(String, path_params, "uuid", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_system_validate(handler)
    function delete_system_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function delete_system_invoke(impl; post_invoke=nothing)
    function delete_system_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_system(req::HTTP.Request, openapi_params["uuid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function delete_systems_read(handler)
    function delete_systems_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function delete_systems_validate(handler)
    function delete_systems_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function delete_systems_invoke(impl; post_invoke=nothing)
    function delete_systems_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.delete_systems(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function discard_simulation_results_read(handler)
    function discard_simulation_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function discard_simulation_results_validate(handler)
    function discard_simulation_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function discard_simulation_results_invoke(impl; post_invoke=nothing)
    function discard_simulation_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.discard_simulation_results(req::HTTP.Request, openapi_params["id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_simulation_read(handler)
    function get_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["name"] =
            OpenAPI.Servers.to_param(String, path_params, "name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_simulation_validate(handler)
    function get_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function get_simulation_invoke(impl; post_invoke=nothing)
    function get_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_simulation(req::HTTP.Request, openapi_params["name"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_simulation_status_read(handler)
    function get_simulation_status_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["clear_progress_events"] =
            OpenAPI.Servers.to_param(Bool, query_params, "clear_progress_events")
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_simulation_status_validate(handler)
    function get_simulation_status_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function get_simulation_status_invoke(impl; post_invoke=nothing)
    function get_simulation_status_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_simulation_status(
            req::HTTP.Request,
            openapi_params["id"];
            clear_progress_events=get(openapi_params, "clear_progress_events", nothing),
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_store_read(handler)
    function get_store_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_store_validate(handler)
    function get_store_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function get_store_invoke(impl; post_invoke=nothing)
    function get_store_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_store(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function get_system_read(handler)
    function get_system_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["uuid"] =
            OpenAPI.Servers.to_param(String, path_params, "uuid", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function get_system_validate(handler)
    function get_system_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function get_system_invoke(impl; post_invoke=nothing)
    function get_system_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.get_system(req::HTTP.Request, openapi_params["uuid"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_aux_variable_names_read(handler)
    function list_aux_variable_names_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_aux_variable_names_validate(handler)
    function list_aux_variable_names_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_aux_variable_names_invoke(impl; post_invoke=nothing)
    function list_aux_variable_names_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_aux_variable_names(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_cached_simulation_results_read(handler)
    function list_cached_simulation_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_cached_simulation_results_validate(handler)
    function list_cached_simulation_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_cached_simulation_results_invoke(impl; post_invoke=nothing)
    function list_cached_simulation_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_cached_simulation_results(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_decision_problems_read(handler)
    function list_decision_problems_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_decision_problems_validate(handler)
    function list_decision_problems_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_decision_problems_invoke(impl; post_invoke=nothing)
    function list_decision_problems_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_decision_problems(req::HTTP.Request, openapi_params["id"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_dual_names_read(handler)
    function list_dual_names_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_dual_names_validate(handler)
    function list_dual_names_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_dual_names_invoke(impl; post_invoke=nothing)
    function list_dual_names_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_dual_names(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_expression_names_read(handler)
    function list_expression_names_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_expression_names_validate(handler)
    function list_expression_names_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_expression_names_invoke(impl; post_invoke=nothing)
    function list_expression_names_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_expression_names(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_parameter_names_read(handler)
    function list_parameter_names_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_parameter_names_validate(handler)
    function list_parameter_names_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_parameter_names_invoke(impl; post_invoke=nothing)
    function list_parameter_names_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_parameter_names(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_simulation_statuses_read(handler)
    function list_simulation_statuses_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["status"] = OpenAPI.Servers.to_param(String, query_params, "status")
        openapi_params["clear_progress_events"] =
            OpenAPI.Servers.to_param(Bool, query_params, "clear_progress_events")
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_simulation_statuses_validate(handler)
    function list_simulation_statuses_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_simulation_statuses_invoke(impl; post_invoke=nothing)
    function list_simulation_statuses_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_simulation_statuses(
            req::HTTP.Request;
            status=get(openapi_params, "status", nothing),
            clear_progress_events=get(openapi_params, "clear_progress_events", nothing),
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_simulations_read(handler)
    function list_simulations_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_simulations_validate(handler)
    function list_simulations_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_simulations_invoke(impl; post_invoke=nothing)
    function list_simulations_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_simulations(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_systems_read(handler)
    function list_systems_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_systems_validate(handler)
    function list_systems_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_systems_invoke(impl; post_invoke=nothing)
    function list_systems_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_systems(req::HTTP.Request;)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function list_variable_names_read(handler)
    function list_variable_names_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function list_variable_names_validate(handler)
    function list_variable_names_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function list_variable_names_invoke(impl; post_invoke=nothing)
    function list_variable_names_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.list_variable_names(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function load_store_read(handler)
    function load_store_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Store, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function load_store_validate(handler)
    function load_store_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function load_store_invoke(impl; post_invoke=nothing)
    function load_store_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.load_store(req::HTTP.Request, openapi_params["body"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function post_simulation_read(handler)
    function post_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Simulation, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function post_simulation_validate(handler)
    function post_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function post_simulation_invoke(impl; post_invoke=nothing)
    function post_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.post_simulation(req::HTTP.Request, openapi_params["body"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function post_system_read(handler)
    function post_system_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        openapi_params["body"] =
            OpenAPI.Servers.to_param_type(PostSystemBody, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function post_system_validate(handler)
    function post_system_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function post_system_invoke(impl; post_invoke=nothing)
    function post_system_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.post_system(req::HTTP.Request, openapi_params["body"];)
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function post_system_case_read(handler)
    function post_system_case_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["category"] =
            OpenAPI.Servers.to_param(String, path_params, "category", required=true)
        openapi_params["name"] =
            OpenAPI.Servers.to_param(String, path_params, "name", required=true)
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["force_build"] =
            OpenAPI.Servers.to_param(Bool, query_params, "force_build")
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function post_system_case_validate(handler)
    function post_system_case_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function post_system_case_invoke(impl; post_invoke=nothing)
    function post_system_case_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.post_system_case(
            req::HTTP.Request,
            openapi_params["category"],
            openapi_params["name"];
            force_build=get(openapi_params, "force_build", nothing),
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_optimizer_stats_read(handler)
    function read_optimizer_stats_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_optimizer_stats_validate(handler)
    function read_optimizer_stats_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_optimizer_stats_invoke(impl; post_invoke=nothing)
    function read_optimizer_stats_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_optimizer_stats(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_realized_aux_variable_results_read(handler)
    function read_realized_aux_variable_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        openapi_params["aux_variable_name"] = OpenAPI.Servers.to_param(
            String,
            path_params,
            "aux_variable_name",
            required=true,
        )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_realized_aux_variable_results_validate(handler)
    function read_realized_aux_variable_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_realized_aux_variable_results_invoke(impl; post_invoke=nothing)
    function read_realized_aux_variable_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_realized_aux_variable_results(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"],
            openapi_params["aux_variable_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_realized_dual_results_read(handler)
    function read_realized_dual_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        openapi_params["dual_name"] =
            OpenAPI.Servers.to_param(String, path_params, "dual_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_realized_dual_results_validate(handler)
    function read_realized_dual_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_realized_dual_results_invoke(impl; post_invoke=nothing)
    function read_realized_dual_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_realized_dual_results(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"],
            openapi_params["dual_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_realized_expression_results_read(handler)
    function read_realized_expression_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        openapi_params["expression_name"] =
            OpenAPI.Servers.to_param(String, path_params, "expression_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_realized_expression_results_validate(handler)
    function read_realized_expression_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_realized_expression_results_invoke(impl; post_invoke=nothing)
    function read_realized_expression_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_realized_expression_results(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"],
            openapi_params["expression_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_realized_parameter_results_read(handler)
    function read_realized_parameter_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        openapi_params["parameter_name"] =
            OpenAPI.Servers.to_param(String, path_params, "parameter_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_realized_parameter_results_validate(handler)
    function read_realized_parameter_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_realized_parameter_results_invoke(impl; post_invoke=nothing)
    function read_realized_parameter_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_realized_parameter_results(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"],
            openapi_params["parameter_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function read_realized_variable_results_read(handler)
    function read_realized_variable_results_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(Int64, path_params, "id", required=true)
        openapi_params["problem_name"] =
            OpenAPI.Servers.to_param(String, path_params, "problem_name", required=true)
        openapi_params["variable_name"] =
            OpenAPI.Servers.to_param(String, path_params, "variable_name", required=true)
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function read_realized_variable_results_validate(handler)
    function read_realized_variable_results_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function read_realized_variable_results_invoke(impl; post_invoke=nothing)
    function read_realized_variable_results_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.read_realized_variable_results(
            req::HTTP.Request,
            openapi_params["id"],
            openapi_params["problem_name"],
            openapi_params["variable_name"];
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function start_simulation_read(handler)
    function start_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["output_dir"] =
            OpenAPI.Servers.to_param(String, query_params, "output_dir")
        openapi_params["poll_interval"] =
            OpenAPI.Servers.to_param(Int64, query_params, "poll_interval")
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Simulation, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function start_simulation_validate(handler)
    function start_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function start_simulation_invoke(impl; post_invoke=nothing)
    function start_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.start_simulation(
            req::HTTP.Request,
            openapi_params["body"];
            output_dir=get(openapi_params, "output_dir", nothing),
            poll_interval=get(openapi_params, "poll_interval", nothing),
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function start_stored_simulation_read(handler)
    function start_stored_simulation_read_handler(req::HTTP.Request)
        openapi_params = Dict{String, Any}()
        path_params = HTTP.getparams(req)
        openapi_params["id"] =
            OpenAPI.Servers.to_param(String, path_params, "id", required=true)
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["output_dir"] =
            OpenAPI.Servers.to_param(String, query_params, "output_dir")
        openapi_params["poll_interval"] =
            OpenAPI.Servers.to_param(Int64, query_params, "poll_interval")
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function start_stored_simulation_validate(handler)
    function start_stored_simulation_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]

        return handler(req)
    end
end

function start_stored_simulation_invoke(impl; post_invoke=nothing)
    function start_stored_simulation_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = impl.start_stored_simulation(
            req::HTTP.Request,
            openapi_params["id"];
            output_dir=get(openapi_params, "output_dir", nothing),
            poll_interval=get(openapi_params, "poll_interval", nothing),
        )
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function registerDefaultApi(
    router::HTTP.Router,
    impl;
    path_prefix::String="",
    optional_middlewares...,
)
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/simulations/{id}/cache_results",
        OpenAPI.Servers.middleware(
            impl,
            cache_simulation_results_read,
            cache_simulation_results_validate,
            cache_simulation_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/simulations/{id}/cancel",
        OpenAPI.Servers.middleware(
            impl,
            cancel_simulation_read,
            cancel_simulation_validate,
            cancel_simulation_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/simulations/{name}",
        OpenAPI.Servers.middleware(
            impl,
            delete_simulation_read,
            delete_simulation_validate,
            delete_simulation_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/simulations",
        OpenAPI.Servers.middleware(
            impl,
            delete_simulations_read,
            delete_simulations_validate,
            delete_simulations_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/store",
        OpenAPI.Servers.middleware(
            impl,
            delete_store_read,
            delete_store_validate,
            delete_store_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/systems/{uuid}",
        OpenAPI.Servers.middleware(
            impl,
            delete_system_read,
            delete_system_validate,
            delete_system_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/systems",
        OpenAPI.Servers.middleware(
            impl,
            delete_systems_read,
            delete_systems_validate,
            delete_systems_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "DELETE",
        path_prefix * "/simulations/{id}/cache_results",
        OpenAPI.Servers.middleware(
            impl,
            discard_simulation_results_read,
            discard_simulation_results_validate,
            discard_simulation_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{name}",
        OpenAPI.Servers.middleware(
            impl,
            get_simulation_read,
            get_simulation_validate,
            get_simulation_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/status",
        OpenAPI.Servers.middleware(
            impl,
            get_simulation_status_read,
            get_simulation_status_validate,
            get_simulation_status_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/store",
        OpenAPI.Servers.middleware(
            impl,
            get_store_read,
            get_store_validate,
            get_store_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/systems/{uuid}",
        OpenAPI.Servers.middleware(
            impl,
            get_system_read,
            get_system_validate,
            get_system_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/aux_variables",
        OpenAPI.Servers.middleware(
            impl,
            list_aux_variable_names_read,
            list_aux_variable_names_validate,
            list_aux_variable_names_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/cache_results",
        OpenAPI.Servers.middleware(
            impl,
            list_cached_simulation_results_read,
            list_cached_simulation_results_validate,
            list_cached_simulation_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/decision_problems",
        OpenAPI.Servers.middleware(
            impl,
            list_decision_problems_read,
            list_decision_problems_validate,
            list_decision_problems_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/duals",
        OpenAPI.Servers.middleware(
            impl,
            list_dual_names_read,
            list_dual_names_validate,
            list_dual_names_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/expressions",
        OpenAPI.Servers.middleware(
            impl,
            list_expression_names_read,
            list_expression_names_validate,
            list_expression_names_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/parameters",
        OpenAPI.Servers.middleware(
            impl,
            list_parameter_names_read,
            list_parameter_names_validate,
            list_parameter_names_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/statuses",
        OpenAPI.Servers.middleware(
            impl,
            list_simulation_statuses_read,
            list_simulation_statuses_validate,
            list_simulation_statuses_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations",
        OpenAPI.Servers.middleware(
            impl,
            list_simulations_read,
            list_simulations_validate,
            list_simulations_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/systems",
        OpenAPI.Servers.middleware(
            impl,
            list_systems_read,
            list_systems_validate,
            list_systems_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/variables",
        OpenAPI.Servers.middleware(
            impl,
            list_variable_names_read,
            list_variable_names_validate,
            list_variable_names_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/store",
        OpenAPI.Servers.middleware(
            impl,
            load_store_read,
            load_store_validate,
            load_store_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/simulations",
        OpenAPI.Servers.middleware(
            impl,
            post_simulation_read,
            post_simulation_validate,
            post_simulation_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/systems",
        OpenAPI.Servers.middleware(
            impl,
            post_system_read,
            post_system_validate,
            post_system_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/systems/{category}/{name}",
        OpenAPI.Servers.middleware(
            impl,
            post_system_case_read,
            post_system_case_validate,
            post_system_case_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix * "/simulations/{id}/problems/{problem_name}/otimizer_stats",
        OpenAPI.Servers.middleware(
            impl,
            read_optimizer_stats_read,
            read_optimizer_stats_validate,
            read_optimizer_stats_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix *
        "/simulations/{id}/problems/{problem_name}/aux_variables/{aux_variable_name}/realized_results",
        OpenAPI.Servers.middleware(
            impl,
            read_realized_aux_variable_results_read,
            read_realized_aux_variable_results_validate,
            read_realized_aux_variable_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix *
        "/simulations/{id}/problems/{problem_name}/duals/{dual_name}/realized_results",
        OpenAPI.Servers.middleware(
            impl,
            read_realized_dual_results_read,
            read_realized_dual_results_validate,
            read_realized_dual_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix *
        "/simulations/{id}/problems/{problem_name}/expressions/{expression_name}/realized_results",
        OpenAPI.Servers.middleware(
            impl,
            read_realized_expression_results_read,
            read_realized_expression_results_validate,
            read_realized_expression_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix *
        "/simulations/{id}/problems/{problem_name}/parameters/{parameter_name}/realized_results",
        OpenAPI.Servers.middleware(
            impl,
            read_realized_parameter_results_read,
            read_realized_parameter_results_validate,
            read_realized_parameter_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "GET",
        path_prefix *
        "/simulations/{id}/problems/{problem_name}/variables/{variable_name}/realized_results",
        OpenAPI.Servers.middleware(
            impl,
            read_realized_variable_results_read,
            read_realized_variable_results_validate,
            read_realized_variable_results_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/simulations/start",
        OpenAPI.Servers.middleware(
            impl,
            start_simulation_read,
            start_simulation_validate,
            start_simulation_invoke;
            optional_middlewares...,
        ),
    )
    HTTP.register!(
        router,
        "POST",
        path_prefix * "/simulations/{id}/start",
        OpenAPI.Servers.middleware(
            impl,
            start_stored_simulation_read,
            start_stored_simulation_validate,
            start_stored_simulation_invoke;
            optional_middlewares...,
        ),
    )
    return router
end
