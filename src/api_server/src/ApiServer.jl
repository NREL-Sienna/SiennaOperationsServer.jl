# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""
Encapsulates generated server code for ApiServer

The following server methods must be implemented:

- **cache_simulation_results**
    - *invocation:* POST /simulations/{id}/cache_results
    - *signature:* cache_simulation_results(req::HTTP.Request, id::Int64;) -> Any
- **cancel_simulation**
    - *invocation:* POST /simulations/{id}/cancel
    - *signature:* cancel_simulation(req::HTTP.Request, id::Int64;) -> Any
- **delete_simulation**
    - *invocation:* DELETE /simulations/{name}
    - *signature:* delete_simulation(req::HTTP.Request, name::String;) -> Any
- **delete_simulations**
    - *invocation:* DELETE /simulations
    - *signature:* delete_simulations(req::HTTP.Request;) -> Any
- **delete_store**
    - *invocation:* DELETE /store
    - *signature:* delete_store(req::HTTP.Request;) -> Any
- **delete_system**
    - *invocation:* DELETE /systems/{uuid}
    - *signature:* delete_system(req::HTTP.Request, uuid::String;) -> Any
- **delete_systems**
    - *invocation:* DELETE /systems
    - *signature:* delete_systems(req::HTTP.Request;) -> Any
- **discard_simulation_results**
    - *invocation:* DELETE /simulations/{id}/cache_results
    - *signature:* discard_simulation_results(req::HTTP.Request, id::Int64;) -> Any
- **get_simulation**
    - *invocation:* GET /simulations/{name}
    - *signature:* get_simulation(req::HTTP.Request, name::String;) -> Simulation
- **get_simulation_status**
    - *invocation:* GET /simulations/{id}/status
    - *signature:* get_simulation_status(req::HTTP.Request, id::Int64; clear_progress_events=nothing,) -> SimulationStatus
- **get_store**
    - *invocation:* GET /store
    - *signature:* get_store(req::HTTP.Request;) -> Any
- **get_system**
    - *invocation:* GET /systems/{uuid}
    - *signature:* get_system(req::HTTP.Request, uuid::String;) -> System
- **list_aux_variable_names**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/aux_variables
    - *signature:* list_aux_variable_names(req::HTTP.Request, id::Int64, problem_name::String;) -> ListNamesResponse
- **list_cached_simulation_results**
    - *invocation:* GET /simulations/cache_results
    - *signature:* list_cached_simulation_results(req::HTTP.Request;) -> Any
- **list_decision_problems**
    - *invocation:* GET /simulations/{id}/decision_problems
    - *signature:* list_decision_problems(req::HTTP.Request, id::Int64;) -> ListNamesResponse
- **list_dual_names**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/duals
    - *signature:* list_dual_names(req::HTTP.Request, id::Int64, problem_name::String;) -> ListNamesResponse
- **list_expression_names**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/expressions
    - *signature:* list_expression_names(req::HTTP.Request, id::Int64, problem_name::String;) -> ListNamesResponse
- **list_parameter_names**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/parameters
    - *signature:* list_parameter_names(req::HTTP.Request, id::Int64, problem_name::String;) -> ListNamesResponse
- **list_simulation_statuses**
    - *invocation:* GET /simulations/statuses
    - *signature:* list_simulation_statuses(req::HTTP.Request; status=nothing, clear_progress_events=nothing,) -> SimulationStatuses
- **list_simulations**
    - *invocation:* GET /simulations
    - *signature:* list_simulations(req::HTTP.Request;) -> ListSimulationsResponse
- **list_systems**
    - *invocation:* GET /systems
    - *signature:* list_systems(req::HTTP.Request;) -> ListSystemsResponse
- **list_variable_names**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/variables
    - *signature:* list_variable_names(req::HTTP.Request, id::Int64, problem_name::String;) -> ListNamesResponse
- **load_store**
    - *invocation:* POST /store
    - *signature:* load_store(req::HTTP.Request, body::Store;) -> Any
- **post_simulation**
    - *invocation:* POST /simulations
    - *signature:* post_simulation(req::HTTP.Request, body::Simulation;) -> Simulation
- **post_system**
    - *invocation:* POST /systems
    - *signature:* post_system(req::HTTP.Request, body::PostSystemBody;) -> System
- **post_system_case**
    - *invocation:* POST /systems/{category}/{name}
    - *signature:* post_system_case(req::HTTP.Request, category::String, name::String; force_build=nothing,) -> System
- **read_optimizer_stats**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/otimizer_stats
    - *signature:* read_optimizer_stats(req::HTTP.Request, id::Int64, problem_name::String;) -> Any
- **read_realized_aux_variable_results**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/aux_variables/{aux_variable_name}/realized_results
    - *signature:* read_realized_aux_variable_results(req::HTTP.Request, id::Int64, problem_name::String, aux_variable_name::String;) -> Any
- **read_realized_dual_results**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/duals/{dual_name}/realized_results
    - *signature:* read_realized_dual_results(req::HTTP.Request, id::Int64, problem_name::String, dual_name::String;) -> Any
- **read_realized_expression_results**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/expressions/{expression_name}/realized_results
    - *signature:* read_realized_expression_results(req::HTTP.Request, id::Int64, problem_name::String, expression_name::String;) -> Any
- **read_realized_parameter_results**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/parameters/{parameter_name}/realized_results
    - *signature:* read_realized_parameter_results(req::HTTP.Request, id::Int64, problem_name::String, parameter_name::String;) -> Any
- **read_realized_variable_results**
    - *invocation:* GET /simulations/{id}/problems/{problem_name}/variables/{variable_name}/realized_results
    - *signature:* read_realized_variable_results(req::HTTP.Request, id::Int64, problem_name::String, variable_name::String;) -> Any
- **start_simulation**
    - *invocation:* POST /simulations/start
    - *signature:* start_simulation(req::HTTP.Request, body::Simulation; output_dir=nothing, poll_interval=nothing,) -> StartSimulationResponse
- **start_stored_simulation**
    - *invocation:* POST /simulations/{id}/start
    - *signature:* start_stored_simulation(req::HTTP.Request, id::String; output_dir=nothing, poll_interval=nothing,) -> StartSimulationResponse
"""
module ApiServer

using HTTP
using URIs
using Dates
using TimeZones
using OpenAPI
using OpenAPI.Servers

const API_VERSION = "1.0"

include("modelincludes.jl")

include("apis/api_DefaultApi.jl")

"""
Register handlers for all APIs in this module in the supplied `Router` instance.

Paramerets:

  - `router`: Router to register handlers in
  - `impl`: module that implements the server methods

Optional parameters:

  - `path_prefix`: prefix to be applied to all paths
  - `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:

  - `init`: called before the request is processed
  - `pre_validation`: called after the request is parsed but before validation
  - `pre_invoke`: called after validation but before the handler is invoked
  - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(
    router::HTTP.Router,
    impl;
    path_prefix::String="",
    optional_middlewares...,
)
    registerDefaultApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    return router
end

# export models
export AbstractFeedforward
export AbstractOptimizer
export Attribute
export CbcOptimizer
export CplexOptimizer
export DecisionModel
export DecisionModelSystem
export DeviceModel
export EnergyLimitFeedforward
export Feedforwards
export FixValueFeedforward
export GlpkOptimizer
export GurobiOptimizer
export HighsOptimizer
export IpoptOptimizer
export ListNamesResponse
export ListSimulationsResponse
export ListSystemsResponse
export NetworkModel
export PostSystemBody
export ProblemTemplate
export ScsOptimizer
export SemiContinuousFeedforward
export ServiceModel
export Simulation
export SimulationModels
export SimulationProgressEvent
export SimulationSequence
export SimulationStatus
export SimulationStatuses
export StartSimulationResponse
export Store
export System
export SystemCase
export SystemPath
export XpressOptimizer

end # module ApiServer
