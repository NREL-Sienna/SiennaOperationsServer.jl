# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    SemiContinuousFeedforward(;
        component_type=nothing,
        source=nothing,
        affected_values=nothing,
        feedforward_type=nothing,
    )

    - component_type::String
    - source::String
    - affected_values::Vector{String}
    - feedforward_type::String
"""
Base.@kwdef mutable struct SemiContinuousFeedforward <: OpenAPI.APIModel
    component_type::Union{Nothing, String} = nothing
    source::Union{Nothing, String} = nothing
    affected_values::Union{Nothing, Vector{String}} = nothing
    feedforward_type::Union{Nothing, String} = nothing

    function SemiContinuousFeedforward(component_type, source, affected_values, feedforward_type, )
        OpenAPI.validate_property(SemiContinuousFeedforward, Symbol("component_type"), component_type)
        OpenAPI.validate_property(SemiContinuousFeedforward, Symbol("source"), source)
        OpenAPI.validate_property(SemiContinuousFeedforward, Symbol("affected_values"), affected_values)
        OpenAPI.validate_property(SemiContinuousFeedforward, Symbol("feedforward_type"), feedforward_type)
        return new(component_type, source, affected_values, feedforward_type, )
    end
end # type SemiContinuousFeedforward

const _property_types_SemiContinuousFeedforward = Dict{Symbol,String}(Symbol("component_type")=>"String", Symbol("source")=>"String", Symbol("affected_values")=>"Vector{String}", Symbol("feedforward_type")=>"String", )
OpenAPI.property_type(::Type{ SemiContinuousFeedforward }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SemiContinuousFeedforward[name]))}

function check_required(o::SemiContinuousFeedforward)
    o.component_type === nothing && (return false)
    o.source === nothing && (return false)
    o.affected_values === nothing && (return false)
    o.feedforward_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SemiContinuousFeedforward }, name::Symbol, val)
end
