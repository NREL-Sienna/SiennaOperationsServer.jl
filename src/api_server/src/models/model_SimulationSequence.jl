# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""
    SimulationSequence(;
        initial_condition_chronology_type=nothing,
        feedforwards_by_model=nothing,
    )

    - initial_condition_chronology_type::String
    - feedforwards_by_model::Vector{Feedforwards}
"""
Base.@kwdef mutable struct SimulationSequence <: OpenAPI.APIModel
    initial_condition_chronology_type::Union{Nothing, String} = nothing
    feedforwards_by_model::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Feedforwards} }

    function SimulationSequence(initial_condition_chronology_type, feedforwards_by_model)
        OpenAPI.validate_property(
            SimulationSequence,
            Symbol("initial_condition_chronology_type"),
            initial_condition_chronology_type,
        )
        OpenAPI.validate_property(
            SimulationSequence,
            Symbol("feedforwards_by_model"),
            feedforwards_by_model,
        )
        return new(initial_condition_chronology_type, feedforwards_by_model)
    end
end # type SimulationSequence

const _property_types_SimulationSequence = Dict{Symbol, String}(
    Symbol("initial_condition_chronology_type") => "String",
    Symbol("feedforwards_by_model") => "Vector{Feedforwards}",
)
OpenAPI.property_type(::Type{SimulationSequence}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_SimulationSequence[name]))}

function check_required(o::SimulationSequence)
    o.initial_condition_chronology_type === nothing && (return false)
    o.feedforwards_by_model === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{SimulationSequence}, name::Symbol, val) end
