# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    ProblemTemplate(;
        network=nothing,
        devices=nothing,
        services=nothing,
    )

    - network::NetworkModel
    - devices::Vector{DeviceModel}
    - services::Vector{ServiceModel}
"""
Base.@kwdef mutable struct ProblemTemplate <: OpenAPI.APIModel
    network = nothing # spec type: Union{ Nothing, NetworkModel }
    devices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{DeviceModel} }
    services::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ServiceModel} }

    function ProblemTemplate(network, devices, services, )
        OpenAPI.validate_property(ProblemTemplate, Symbol("network"), network)
        OpenAPI.validate_property(ProblemTemplate, Symbol("devices"), devices)
        OpenAPI.validate_property(ProblemTemplate, Symbol("services"), services)
        return new(network, devices, services, )
    end
end # type ProblemTemplate

const _property_types_ProblemTemplate = Dict{Symbol,String}(Symbol("network")=>"NetworkModel", Symbol("devices")=>"Vector{DeviceModel}", Symbol("services")=>"Vector{ServiceModel}", )
OpenAPI.property_type(::Type{ ProblemTemplate }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ProblemTemplate[name]))}

function check_required(o::ProblemTemplate)
    o.network === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ProblemTemplate }, name::Symbol, val)
end
