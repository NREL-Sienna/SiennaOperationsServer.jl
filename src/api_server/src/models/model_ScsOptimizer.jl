# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    ScsOptimizer(;
        optimizer_type=nothing,
        max_iters=100000,
        eps=0.00010,
        verbose=nothing,
    )

    - optimizer_type::String
    - max_iters::Int64
    - eps::Float64
    - verbose::Bool
"""
Base.@kwdef mutable struct ScsOptimizer <: OpenAPI.APIModel
    optimizer_type::Union{Nothing, String} = nothing
    max_iters::Union{Nothing, Int64} = 100000
    eps::Union{Nothing, Float64} = 0.00010
    verbose::Union{Nothing, Bool} = nothing

    function ScsOptimizer(optimizer_type, max_iters, eps, verbose, )
        OpenAPI.validate_property(ScsOptimizer, Symbol("optimizer_type"), optimizer_type)
        OpenAPI.validate_property(ScsOptimizer, Symbol("max_iters"), max_iters)
        OpenAPI.validate_property(ScsOptimizer, Symbol("eps"), eps)
        OpenAPI.validate_property(ScsOptimizer, Symbol("verbose"), verbose)
        return new(optimizer_type, max_iters, eps, verbose, )
    end
end # type ScsOptimizer

const _property_types_ScsOptimizer = Dict{Symbol,String}(Symbol("optimizer_type")=>"String", Symbol("max_iters")=>"Int64", Symbol("eps")=>"Float64", Symbol("verbose")=>"Bool", )
OpenAPI.property_type(::Type{ ScsOptimizer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ScsOptimizer[name]))}

function check_required(o::ScsOptimizer)
    o.optimizer_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ScsOptimizer }, name::Symbol, val)
end
