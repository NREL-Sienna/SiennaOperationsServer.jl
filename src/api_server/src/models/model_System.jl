# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

@doc raw"""
    System(;
        uuid=nothing,
        name=nothing,
        description=nothing,
        forecast_initial_times=nothing,
        forecast_window_count=nothing,
        forecast_horizon=nothing,
        forecast_initial_timestamp=nothing,
        forecast_interval=nothing,
        time_series_resolution=nothing,
    )

    - uuid::String
    - name::String
    - description::String
    - forecast_initial_times::Vector{String}
    - forecast_window_count::Int64
    - forecast_horizon::Int64
    - forecast_initial_timestamp::String
    - forecast_interval::String
    - time_series_resolution::String
"""
Base.@kwdef mutable struct System <: OpenAPI.APIModel
    uuid::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    forecast_initial_times::Union{Nothing, Vector{String}} = nothing
    forecast_window_count::Union{Nothing, Int64} = nothing
    forecast_horizon::Union{Nothing, Int64} = nothing
    forecast_initial_timestamp::Union{Nothing, String} = nothing
    forecast_interval::Union{Nothing, String} = nothing
    time_series_resolution::Union{Nothing, String} = nothing

    function System(
        uuid,
        name,
        description,
        forecast_initial_times,
        forecast_window_count,
        forecast_horizon,
        forecast_initial_timestamp,
        forecast_interval,
        time_series_resolution,
    )
        OpenAPI.validate_property(System, Symbol("uuid"), uuid)
        OpenAPI.validate_property(System, Symbol("name"), name)
        OpenAPI.validate_property(System, Symbol("description"), description)
        OpenAPI.validate_property(
            System,
            Symbol("forecast_initial_times"),
            forecast_initial_times,
        )
        OpenAPI.validate_property(
            System,
            Symbol("forecast_window_count"),
            forecast_window_count,
        )
        OpenAPI.validate_property(System, Symbol("forecast_horizon"), forecast_horizon)
        OpenAPI.validate_property(
            System,
            Symbol("forecast_initial_timestamp"),
            forecast_initial_timestamp,
        )
        OpenAPI.validate_property(System, Symbol("forecast_interval"), forecast_interval)
        OpenAPI.validate_property(
            System,
            Symbol("time_series_resolution"),
            time_series_resolution,
        )
        return new(
            uuid,
            name,
            description,
            forecast_initial_times,
            forecast_window_count,
            forecast_horizon,
            forecast_initial_timestamp,
            forecast_interval,
            time_series_resolution,
        )
    end
end # type System

const _property_types_System = Dict{Symbol, String}(
    Symbol("uuid") => "String",
    Symbol("name") => "String",
    Symbol("description") => "String",
    Symbol("forecast_initial_times") => "Vector{String}",
    Symbol("forecast_window_count") => "Int64",
    Symbol("forecast_horizon") => "Int64",
    Symbol("forecast_initial_timestamp") => "String",
    Symbol("forecast_interval") => "String",
    Symbol("time_series_resolution") => "String",
)
OpenAPI.property_type(::Type{System}, name::Symbol) =
    Union{Nothing, eval(Base.Meta.parse(_property_types_System[name]))}

function check_required(o::System)
    o.uuid === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{System}, name::Symbol, val) end
