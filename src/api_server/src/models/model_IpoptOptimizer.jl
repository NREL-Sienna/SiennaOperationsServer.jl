# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    IpoptOptimizer(;
        optimizer_type=nothing,
        print_level=0,
        max_cpu_time=5.0,
    )

    - optimizer_type::String
    - print_level::Int64
    - max_cpu_time::Float64
"""
Base.@kwdef mutable struct IpoptOptimizer <: OpenAPI.APIModel
    optimizer_type::Union{Nothing, String} = nothing
    print_level::Union{Nothing, Int64} = 0
    max_cpu_time::Union{Nothing, Float64} = 5.0

    function IpoptOptimizer(optimizer_type, print_level, max_cpu_time, )
        OpenAPI.validate_property(IpoptOptimizer, Symbol("optimizer_type"), optimizer_type)
        OpenAPI.validate_property(IpoptOptimizer, Symbol("print_level"), print_level)
        OpenAPI.validate_property(IpoptOptimizer, Symbol("max_cpu_time"), max_cpu_time)
        return new(optimizer_type, print_level, max_cpu_time, )
    end
end # type IpoptOptimizer

const _property_types_IpoptOptimizer = Dict{Symbol,String}(Symbol("optimizer_type")=>"String", Symbol("print_level")=>"Int64", Symbol("max_cpu_time")=>"Float64", )
OpenAPI.property_type(::Type{ IpoptOptimizer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_IpoptOptimizer[name]))}

function check_required(o::IpoptOptimizer)
    o.optimizer_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ IpoptOptimizer }, name::Symbol, val)
end
