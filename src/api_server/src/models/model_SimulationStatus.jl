# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    SimulationStatus(;
        status=nothing,
        simulation_id=nothing,
        name=nothing,
        path=nothing,
        start_time=nothing,
        return_code=nothing,
        exec_time_s=nothing,
        worker_pid=nothing,
        progress_events=nothing,
    )

    - status::String
    - simulation_id::Int64
    - name::String
    - path::String
    - start_time::String
    - return_code::Int64
    - exec_time_s::Float64
    - worker_pid::Int64
    - progress_events::Vector{SimulationProgressEvent}
"""
Base.@kwdef mutable struct SimulationStatus <: OpenAPI.APIModel
    status::Union{Nothing, String} = nothing
    simulation_id::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    path::Union{Nothing, String} = nothing
    start_time::Union{Nothing, String} = nothing
    return_code::Union{Nothing, Int64} = nothing
    exec_time_s::Union{Nothing, Float64} = nothing
    worker_pid::Union{Nothing, Int64} = nothing
    progress_events::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{SimulationProgressEvent} }

    function SimulationStatus(status, simulation_id, name, path, start_time, return_code, exec_time_s, worker_pid, progress_events, )
        OpenAPI.validate_property(SimulationStatus, Symbol("status"), status)
        OpenAPI.validate_property(SimulationStatus, Symbol("simulation_id"), simulation_id)
        OpenAPI.validate_property(SimulationStatus, Symbol("name"), name)
        OpenAPI.validate_property(SimulationStatus, Symbol("path"), path)
        OpenAPI.validate_property(SimulationStatus, Symbol("start_time"), start_time)
        OpenAPI.validate_property(SimulationStatus, Symbol("return_code"), return_code)
        OpenAPI.validate_property(SimulationStatus, Symbol("exec_time_s"), exec_time_s)
        OpenAPI.validate_property(SimulationStatus, Symbol("worker_pid"), worker_pid)
        OpenAPI.validate_property(SimulationStatus, Symbol("progress_events"), progress_events)
        return new(status, simulation_id, name, path, start_time, return_code, exec_time_s, worker_pid, progress_events, )
    end
end # type SimulationStatus

const _property_types_SimulationStatus = Dict{Symbol,String}(Symbol("status")=>"String", Symbol("simulation_id")=>"Int64", Symbol("name")=>"String", Symbol("path")=>"String", Symbol("start_time")=>"String", Symbol("return_code")=>"Int64", Symbol("exec_time_s")=>"Float64", Symbol("worker_pid")=>"Int64", Symbol("progress_events")=>"Vector{SimulationProgressEvent}", )
OpenAPI.property_type(::Type{ SimulationStatus }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_SimulationStatus[name]))}

function check_required(o::SimulationStatus)
    o.status === nothing && (return false)
    o.simulation_id === nothing && (return false)
    o.name === nothing && (return false)
    o.path === nothing && (return false)
    o.start_time === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ SimulationStatus }, name::Symbol, val)
    if name === Symbol("status")
        OpenAPI.validate_param(name, "SimulationStatus", :enum, val, ["ready", "running", "done", "canceled"])
    end
end
