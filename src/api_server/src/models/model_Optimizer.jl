# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    Optimizer(;
        optimizer_type=nothing,
        attributes=nothing,
    )

    - optimizer_type::String
    - attributes::Any
"""
Base.@kwdef mutable struct Optimizer <: OpenAPI.APIModel
    optimizer_type::Union{Nothing, String} = nothing
    attributes::Union{Nothing, Any} = nothing

    function Optimizer(optimizer_type, attributes, )
        OpenAPI.validate_property(Optimizer, Symbol("optimizer_type"), optimizer_type)
        OpenAPI.validate_property(Optimizer, Symbol("attributes"), attributes)
        return new(optimizer_type, attributes, )
    end
end # type Optimizer

const _property_types_Optimizer = Dict{Symbol,String}(Symbol("optimizer_type")=>"String", Symbol("attributes")=>"Any", )
OpenAPI.property_type(::Type{ Optimizer }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Optimizer[name]))}

function check_required(o::Optimizer)
    o.optimizer_type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Optimizer }, name::Symbol, val)
    if name === Symbol("optimizer_type")
        OpenAPI.validate_param(name, "Optimizer", :enum, val, ["cbc", "cplex", "glpk", "gurobi", "highs", "ipopt", "scs", "xpress"])
    end
end
