# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class System(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'description': 'str',
        'forecast_initial_times': 'list[str]',
        'forecast_window_count': 'int',
        'forecast_horizon': 'int',
        'forecast_initial_timestamp': 'str',
        'forecast_interval': 'str',
        'time_series_resolution': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'forecast_initial_times': 'forecast_initial_times',
        'forecast_window_count': 'forecast_window_count',
        'forecast_horizon': 'forecast_horizon',
        'forecast_initial_timestamp': 'forecast_initial_timestamp',
        'forecast_interval': 'forecast_interval',
        'time_series_resolution': 'time_series_resolution'
    }

    def __init__(self, uuid=None, name=None, description=None, forecast_initial_times=None, forecast_window_count=None, forecast_horizon=None, forecast_initial_timestamp=None, forecast_interval=None, time_series_resolution=None):  # noqa: E501
        """System - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._name = None
        self._description = None
        self._forecast_initial_times = None
        self._forecast_window_count = None
        self._forecast_horizon = None
        self._forecast_initial_timestamp = None
        self._forecast_interval = None
        self._time_series_resolution = None
        self.discriminator = None
        self.uuid = uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if forecast_initial_times is not None:
            self.forecast_initial_times = forecast_initial_times
        if forecast_window_count is not None:
            self.forecast_window_count = forecast_window_count
        if forecast_horizon is not None:
            self.forecast_horizon = forecast_horizon
        if forecast_initial_timestamp is not None:
            self.forecast_initial_timestamp = forecast_initial_timestamp
        if forecast_interval is not None:
            self.forecast_interval = forecast_interval
        if time_series_resolution is not None:
            self.time_series_resolution = time_series_resolution

    @property
    def uuid(self):
        """Gets the uuid of this System.  # noqa: E501


        :return: The uuid of this System.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this System.


        :param uuid: The uuid of this System.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this System.  # noqa: E501


        :return: The name of this System.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this System.


        :param name: The name of this System.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this System.  # noqa: E501


        :return: The description of this System.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this System.


        :param description: The description of this System.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def forecast_initial_times(self):
        """Gets the forecast_initial_times of this System.  # noqa: E501


        :return: The forecast_initial_times of this System.  # noqa: E501
        :rtype: list[str]
        """
        return self._forecast_initial_times

    @forecast_initial_times.setter
    def forecast_initial_times(self, forecast_initial_times):
        """Sets the forecast_initial_times of this System.


        :param forecast_initial_times: The forecast_initial_times of this System.  # noqa: E501
        :type: list[str]
        """

        self._forecast_initial_times = forecast_initial_times

    @property
    def forecast_window_count(self):
        """Gets the forecast_window_count of this System.  # noqa: E501


        :return: The forecast_window_count of this System.  # noqa: E501
        :rtype: int
        """
        return self._forecast_window_count

    @forecast_window_count.setter
    def forecast_window_count(self, forecast_window_count):
        """Sets the forecast_window_count of this System.


        :param forecast_window_count: The forecast_window_count of this System.  # noqa: E501
        :type: int
        """

        self._forecast_window_count = forecast_window_count

    @property
    def forecast_horizon(self):
        """Gets the forecast_horizon of this System.  # noqa: E501


        :return: The forecast_horizon of this System.  # noqa: E501
        :rtype: int
        """
        return self._forecast_horizon

    @forecast_horizon.setter
    def forecast_horizon(self, forecast_horizon):
        """Sets the forecast_horizon of this System.


        :param forecast_horizon: The forecast_horizon of this System.  # noqa: E501
        :type: int
        """

        self._forecast_horizon = forecast_horizon

    @property
    def forecast_initial_timestamp(self):
        """Gets the forecast_initial_timestamp of this System.  # noqa: E501


        :return: The forecast_initial_timestamp of this System.  # noqa: E501
        :rtype: str
        """
        return self._forecast_initial_timestamp

    @forecast_initial_timestamp.setter
    def forecast_initial_timestamp(self, forecast_initial_timestamp):
        """Sets the forecast_initial_timestamp of this System.


        :param forecast_initial_timestamp: The forecast_initial_timestamp of this System.  # noqa: E501
        :type: str
        """

        self._forecast_initial_timestamp = forecast_initial_timestamp

    @property
    def forecast_interval(self):
        """Gets the forecast_interval of this System.  # noqa: E501


        :return: The forecast_interval of this System.  # noqa: E501
        :rtype: str
        """
        return self._forecast_interval

    @forecast_interval.setter
    def forecast_interval(self, forecast_interval):
        """Sets the forecast_interval of this System.


        :param forecast_interval: The forecast_interval of this System.  # noqa: E501
        :type: str
        """

        self._forecast_interval = forecast_interval

    @property
    def time_series_resolution(self):
        """Gets the time_series_resolution of this System.  # noqa: E501


        :return: The time_series_resolution of this System.  # noqa: E501
        :rtype: str
        """
        return self._time_series_resolution

    @time_series_resolution.setter
    def time_series_resolution(self, time_series_resolution):
        """Sets the time_series_resolution of this System.


        :param time_series_resolution: The time_series_resolution of this System.  # noqa: E501
        :type: str
        """

        self._time_series_resolution = time_series_resolution

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(System, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, System):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
