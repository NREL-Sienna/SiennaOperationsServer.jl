# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IpoptOptimizer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'optimizer_type': 'str',
        'print_level': 'int',
        'max_cpu_time': 'float'
    }

    attribute_map = {
        'optimizer_type': 'optimizer_type',
        'print_level': 'print_level',
        'max_cpu_time': 'max_cpu_time'
    }

    def __init__(self, optimizer_type=None, print_level=0, max_cpu_time=5.0):  # noqa: E501
        """IpoptOptimizer - a model defined in Swagger"""  # noqa: E501
        self._optimizer_type = None
        self._print_level = None
        self._max_cpu_time = None
        self.discriminator = None
        self.optimizer_type = optimizer_type
        if print_level is not None:
            self.print_level = print_level
        if max_cpu_time is not None:
            self.max_cpu_time = max_cpu_time

    @property
    def optimizer_type(self):
        """Gets the optimizer_type of this IpoptOptimizer.  # noqa: E501


        :return: The optimizer_type of this IpoptOptimizer.  # noqa: E501
        :rtype: str
        """
        return self._optimizer_type

    @optimizer_type.setter
    def optimizer_type(self, optimizer_type):
        """Sets the optimizer_type of this IpoptOptimizer.


        :param optimizer_type: The optimizer_type of this IpoptOptimizer.  # noqa: E501
        :type: str
        """
        if optimizer_type is None:
            raise ValueError("Invalid value for `optimizer_type`, must not be `None`")  # noqa: E501

        self._optimizer_type = optimizer_type

    @property
    def print_level(self):
        """Gets the print_level of this IpoptOptimizer.  # noqa: E501


        :return: The print_level of this IpoptOptimizer.  # noqa: E501
        :rtype: int
        """
        return self._print_level

    @print_level.setter
    def print_level(self, print_level):
        """Sets the print_level of this IpoptOptimizer.


        :param print_level: The print_level of this IpoptOptimizer.  # noqa: E501
        :type: int
        """

        self._print_level = print_level

    @property
    def max_cpu_time(self):
        """Gets the max_cpu_time of this IpoptOptimizer.  # noqa: E501


        :return: The max_cpu_time of this IpoptOptimizer.  # noqa: E501
        :rtype: float
        """
        return self._max_cpu_time

    @max_cpu_time.setter
    def max_cpu_time(self, max_cpu_time):
        """Sets the max_cpu_time of this IpoptOptimizer.


        :param max_cpu_time: The max_cpu_time of this IpoptOptimizer.  # noqa: E501
        :type: float
        """

        self._max_cpu_time = max_cpu_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpoptOptimizer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpoptOptimizer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
