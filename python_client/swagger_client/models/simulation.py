# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Simulation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'models': 'SimulationModels',
        'sequence': 'SimulationSequence',
        'num_steps': 'int'
    }

    attribute_map = {
        'name': 'name',
        'models': 'models',
        'sequence': 'sequence',
        'num_steps': 'num_steps'
    }

    def __init__(self, name=None, models=None, sequence=None, num_steps=None):  # noqa: E501
        """Simulation - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._models = None
        self._sequence = None
        self._num_steps = None
        self.discriminator = None
        self.name = name
        self.models = models
        self.sequence = sequence
        if num_steps is not None:
            self.num_steps = num_steps

    @property
    def name(self):
        """Gets the name of this Simulation.  # noqa: E501


        :return: The name of this Simulation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Simulation.


        :param name: The name of this Simulation.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def models(self):
        """Gets the models of this Simulation.  # noqa: E501


        :return: The models of this Simulation.  # noqa: E501
        :rtype: SimulationModels
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Simulation.


        :param models: The models of this Simulation.  # noqa: E501
        :type: SimulationModels
        """
        if models is None:
            raise ValueError("Invalid value for `models`, must not be `None`")  # noqa: E501

        self._models = models

    @property
    def sequence(self):
        """Gets the sequence of this Simulation.  # noqa: E501


        :return: The sequence of this Simulation.  # noqa: E501
        :rtype: SimulationSequence
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this Simulation.


        :param sequence: The sequence of this Simulation.  # noqa: E501
        :type: SimulationSequence
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def num_steps(self):
        """Gets the num_steps of this Simulation.  # noqa: E501


        :return: The num_steps of this Simulation.  # noqa: E501
        :rtype: int
        """
        return self._num_steps

    @num_steps.setter
    def num_steps(self, num_steps):
        """Sets the num_steps of this Simulation.


        :param num_steps: The num_steps of this Simulation.  # noqa: E501
        :type: int
        """

        self._num_steps = num_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Simulation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Simulation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
