# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'network_type': 'str',
        'use_slacks': 'bool',
        'ptdf_matrix': 'str',
        'duals': 'list[str]'
    }

    attribute_map = {
        'network_type': 'network_type',
        'use_slacks': 'use_slacks',
        'ptdf_matrix': 'ptdf_matrix',
        'duals': 'duals'
    }

    def __init__(self, network_type=None, use_slacks=False, ptdf_matrix=None, duals=None):  # noqa: E501
        """NetworkModel - a model defined in Swagger"""  # noqa: E501
        self._network_type = None
        self._use_slacks = None
        self._ptdf_matrix = None
        self._duals = None
        self.discriminator = None
        if network_type is not None:
            self.network_type = network_type
        if use_slacks is not None:
            self.use_slacks = use_slacks
        if ptdf_matrix is not None:
            self.ptdf_matrix = ptdf_matrix
        if duals is not None:
            self.duals = duals

    @property
    def network_type(self):
        """Gets the network_type of this NetworkModel.  # noqa: E501


        :return: The network_type of this NetworkModel.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this NetworkModel.


        :param network_type: The network_type of this NetworkModel.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    @property
    def use_slacks(self):
        """Gets the use_slacks of this NetworkModel.  # noqa: E501


        :return: The use_slacks of this NetworkModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_slacks

    @use_slacks.setter
    def use_slacks(self, use_slacks):
        """Sets the use_slacks of this NetworkModel.


        :param use_slacks: The use_slacks of this NetworkModel.  # noqa: E501
        :type: bool
        """

        self._use_slacks = use_slacks

    @property
    def ptdf_matrix(self):
        """Gets the ptdf_matrix of this NetworkModel.  # noqa: E501


        :return: The ptdf_matrix of this NetworkModel.  # noqa: E501
        :rtype: str
        """
        return self._ptdf_matrix

    @ptdf_matrix.setter
    def ptdf_matrix(self, ptdf_matrix):
        """Sets the ptdf_matrix of this NetworkModel.


        :param ptdf_matrix: The ptdf_matrix of this NetworkModel.  # noqa: E501
        :type: str
        """

        self._ptdf_matrix = ptdf_matrix

    @property
    def duals(self):
        """Gets the duals of this NetworkModel.  # noqa: E501


        :return: The duals of this NetworkModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._duals

    @duals.setter
    def duals(self, duals):
        """Sets the duals of this NetworkModel.


        :param duals: The duals of this NetworkModel.  # noqa: E501
        :type: list[str]
        """

        self._duals = duals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
