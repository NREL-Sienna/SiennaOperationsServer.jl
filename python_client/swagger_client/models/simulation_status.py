# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'simulation_id': 'int',
        'name': 'str',
        'path': 'str',
        'start_time': 'str',
        'return_code': 'int',
        'exec_time_s': 'float',
        'worker_pid': 'int',
        'progress_events': 'list[SimulationProgressEvent]'
    }

    attribute_map = {
        'status': 'status',
        'simulation_id': 'simulation_id',
        'name': 'name',
        'path': 'path',
        'start_time': 'start_time',
        'return_code': 'return_code',
        'exec_time_s': 'exec_time_s',
        'worker_pid': 'worker_pid',
        'progress_events': 'progress_events'
    }

    def __init__(self, status=None, simulation_id=None, name=None, path=None, start_time=None, return_code=None, exec_time_s=None, worker_pid=None, progress_events=None):  # noqa: E501
        """SimulationStatus - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._simulation_id = None
        self._name = None
        self._path = None
        self._start_time = None
        self._return_code = None
        self._exec_time_s = None
        self._worker_pid = None
        self._progress_events = None
        self.discriminator = None
        self.status = status
        self.simulation_id = simulation_id
        self.name = name
        self.path = path
        self.start_time = start_time
        if return_code is not None:
            self.return_code = return_code
        if exec_time_s is not None:
            self.exec_time_s = exec_time_s
        if worker_pid is not None:
            self.worker_pid = worker_pid
        if progress_events is not None:
            self.progress_events = progress_events

    @property
    def status(self):
        """Gets the status of this SimulationStatus.  # noqa: E501


        :return: The status of this SimulationStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SimulationStatus.


        :param status: The status of this SimulationStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ready", "running", "done", "canceled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def simulation_id(self):
        """Gets the simulation_id of this SimulationStatus.  # noqa: E501


        :return: The simulation_id of this SimulationStatus.  # noqa: E501
        :rtype: int
        """
        return self._simulation_id

    @simulation_id.setter
    def simulation_id(self, simulation_id):
        """Sets the simulation_id of this SimulationStatus.


        :param simulation_id: The simulation_id of this SimulationStatus.  # noqa: E501
        :type: int
        """
        if simulation_id is None:
            raise ValueError("Invalid value for `simulation_id`, must not be `None`")  # noqa: E501

        self._simulation_id = simulation_id

    @property
    def name(self):
        """Gets the name of this SimulationStatus.  # noqa: E501


        :return: The name of this SimulationStatus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimulationStatus.


        :param name: The name of this SimulationStatus.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this SimulationStatus.  # noqa: E501


        :return: The path of this SimulationStatus.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this SimulationStatus.


        :param path: The path of this SimulationStatus.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def start_time(self):
        """Gets the start_time of this SimulationStatus.  # noqa: E501


        :return: The start_time of this SimulationStatus.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SimulationStatus.


        :param start_time: The start_time of this SimulationStatus.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def return_code(self):
        """Gets the return_code of this SimulationStatus.  # noqa: E501


        :return: The return_code of this SimulationStatus.  # noqa: E501
        :rtype: int
        """
        return self._return_code

    @return_code.setter
    def return_code(self, return_code):
        """Sets the return_code of this SimulationStatus.


        :param return_code: The return_code of this SimulationStatus.  # noqa: E501
        :type: int
        """

        self._return_code = return_code

    @property
    def exec_time_s(self):
        """Gets the exec_time_s of this SimulationStatus.  # noqa: E501


        :return: The exec_time_s of this SimulationStatus.  # noqa: E501
        :rtype: float
        """
        return self._exec_time_s

    @exec_time_s.setter
    def exec_time_s(self, exec_time_s):
        """Sets the exec_time_s of this SimulationStatus.


        :param exec_time_s: The exec_time_s of this SimulationStatus.  # noqa: E501
        :type: float
        """

        self._exec_time_s = exec_time_s

    @property
    def worker_pid(self):
        """Gets the worker_pid of this SimulationStatus.  # noqa: E501


        :return: The worker_pid of this SimulationStatus.  # noqa: E501
        :rtype: int
        """
        return self._worker_pid

    @worker_pid.setter
    def worker_pid(self, worker_pid):
        """Sets the worker_pid of this SimulationStatus.


        :param worker_pid: The worker_pid of this SimulationStatus.  # noqa: E501
        :type: int
        """

        self._worker_pid = worker_pid

    @property
    def progress_events(self):
        """Gets the progress_events of this SimulationStatus.  # noqa: E501


        :return: The progress_events of this SimulationStatus.  # noqa: E501
        :rtype: list[SimulationProgressEvent]
        """
        return self._progress_events

    @progress_events.setter
    def progress_events(self, progress_events):
        """Sets the progress_events of this SimulationStatus.


        :param progress_events: The progress_events of this SimulationStatus.  # noqa: E501
        :type: list[SimulationProgressEvent]
        """

        self._progress_events = progress_events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
