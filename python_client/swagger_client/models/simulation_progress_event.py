# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimulationProgressEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model_name': 'str',
        'step': 'int',
        'index': 'int',
        'timestamp': 'str',
        'wall_time': 'str',
        'exec_time_s': 'float'
    }

    attribute_map = {
        'model_name': 'model_name',
        'step': 'step',
        'index': 'index',
        'timestamp': 'timestamp',
        'wall_time': 'wall_time',
        'exec_time_s': 'exec_time_s'
    }

    def __init__(self, model_name=None, step=None, index=None, timestamp=None, wall_time=None, exec_time_s=None):  # noqa: E501
        """SimulationProgressEvent - a model defined in Swagger"""  # noqa: E501
        self._model_name = None
        self._step = None
        self._index = None
        self._timestamp = None
        self._wall_time = None
        self._exec_time_s = None
        self.discriminator = None
        self.model_name = model_name
        self.step = step
        self.index = index
        self.timestamp = timestamp
        self.wall_time = wall_time
        self.exec_time_s = exec_time_s

    @property
    def model_name(self):
        """Gets the model_name of this SimulationProgressEvent.  # noqa: E501


        :return: The model_name of this SimulationProgressEvent.  # noqa: E501
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """Sets the model_name of this SimulationProgressEvent.


        :param model_name: The model_name of this SimulationProgressEvent.  # noqa: E501
        :type: str
        """
        if model_name is None:
            raise ValueError("Invalid value for `model_name`, must not be `None`")  # noqa: E501

        self._model_name = model_name

    @property
    def step(self):
        """Gets the step of this SimulationProgressEvent.  # noqa: E501


        :return: The step of this SimulationProgressEvent.  # noqa: E501
        :rtype: int
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this SimulationProgressEvent.


        :param step: The step of this SimulationProgressEvent.  # noqa: E501
        :type: int
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501

        self._step = step

    @property
    def index(self):
        """Gets the index of this SimulationProgressEvent.  # noqa: E501


        :return: The index of this SimulationProgressEvent.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this SimulationProgressEvent.


        :param index: The index of this SimulationProgressEvent.  # noqa: E501
        :type: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def timestamp(self):
        """Gets the timestamp of this SimulationProgressEvent.  # noqa: E501


        :return: The timestamp of this SimulationProgressEvent.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SimulationProgressEvent.


        :param timestamp: The timestamp of this SimulationProgressEvent.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def wall_time(self):
        """Gets the wall_time of this SimulationProgressEvent.  # noqa: E501


        :return: The wall_time of this SimulationProgressEvent.  # noqa: E501
        :rtype: str
        """
        return self._wall_time

    @wall_time.setter
    def wall_time(self, wall_time):
        """Sets the wall_time of this SimulationProgressEvent.


        :param wall_time: The wall_time of this SimulationProgressEvent.  # noqa: E501
        :type: str
        """
        if wall_time is None:
            raise ValueError("Invalid value for `wall_time`, must not be `None`")  # noqa: E501

        self._wall_time = wall_time

    @property
    def exec_time_s(self):
        """Gets the exec_time_s of this SimulationProgressEvent.  # noqa: E501


        :return: The exec_time_s of this SimulationProgressEvent.  # noqa: E501
        :rtype: float
        """
        return self._exec_time_s

    @exec_time_s.setter
    def exec_time_s(self, exec_time_s):
        """Sets the exec_time_s of this SimulationProgressEvent.


        :param exec_time_s: The exec_time_s of this SimulationProgressEvent.  # noqa: E501
        :type: float
        """
        if exec_time_s is None:
            raise ValueError("Invalid value for `exec_time_s`, must not be `None`")  # noqa: E501

        self._exec_time_s = exec_time_s

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimulationProgressEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimulationProgressEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
