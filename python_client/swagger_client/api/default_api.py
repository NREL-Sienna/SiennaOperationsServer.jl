# coding: utf-8

"""
    SiennaOperationsSimulations

    This is a SiennaOperationsSimulations server.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cache_simulation_results(self, id, **kwargs):  # noqa: E501
        """Cache the results for a simulation.  # noqa: E501

        Cache the results for a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cache_simulation_results(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cache_simulation_results_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cache_simulation_results_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cache_simulation_results_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cache the results for a simulation.  # noqa: E501

        Cache the results for a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cache_simulation_results_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cache_simulation_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cache_simulation_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/cache_results', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_simulation(self, id, **kwargs):  # noqa: E501
        """Cancel a simulation.  # noqa: E501

        Cancel a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_simulation(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInt id: Simulation name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_simulation_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_simulation_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def cancel_simulation_with_http_info(self, id, **kwargs):  # noqa: E501
        """Cancel a simulation.  # noqa: E501

        Cancel a simulation  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_simulation_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInt id: Simulation name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancel_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_simulation(self, name, **kwargs):  # noqa: E501
        """Remove a stored simulation.  # noqa: E501

        Remove a stored simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_simulation(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Simulation name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_simulation_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_simulation_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_simulation_with_http_info(self, name, **kwargs):  # noqa: E501
        """Remove a stored simulation.  # noqa: E501

        Remove a stored simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_simulation_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Simulation name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_simulations(self, **kwargs):  # noqa: E501
        """Delete all simulations.  # noqa: E501

        Delete all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_simulations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_simulations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_simulations_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_simulations_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all simulations.  # noqa: E501

        Delete all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_simulations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_simulations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_store(self, **kwargs):  # noqa: E501
        """Delete the contents of the data store.  # noqa: E501

        Delete the contents of the data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_store_with_http_info(self, **kwargs):  # noqa: E501
        """Delete the contents of the data store.  # noqa: E501

        Delete the contents of the data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/store', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_system(self, uuid, **kwargs):  # noqa: E501
        """Remove a loaded power system.  # noqa: E501

        Remove a loaded power system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_system(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: System UUID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_system_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_system_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def delete_system_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Remove a loaded power system.  # noqa: E501

        Remove a loaded power system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_system_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: System UUID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_systems(self, **kwargs):  # noqa: E501
        """Delete all systems.  # noqa: E501

        Delete all systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_systems(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_systems_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_systems_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_systems_with_http_info(self, **kwargs):  # noqa: E501
        """Delete all systems.  # noqa: E501

        Delete all systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_systems_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_systems" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def discard_simulation_results(self, id, **kwargs):  # noqa: E501
        """Discard the cached results for a simulation.  # noqa: E501

        Discard the cached results for a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discard_simulation_results(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.discard_simulation_results_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.discard_simulation_results_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def discard_simulation_results_with_http_info(self, id, **kwargs):  # noqa: E501
        """Discard the cached results for a simulation.  # noqa: E501

        Discard the cached results for a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.discard_simulation_results_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method discard_simulation_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `discard_simulation_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/cache_results', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_simulation(self, name, **kwargs):  # noqa: E501
        """Retrieve one simulation.  # noqa: E501

        Retrieve one simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulation(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Simulation name (required)
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_simulation_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_simulation_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def get_simulation_with_http_info(self, name, **kwargs):  # noqa: E501
        """Retrieve one simulation.  # noqa: E501

        Retrieve one simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulation_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Simulation name (required)
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Simulation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_simulation_status(self, id, **kwargs):  # noqa: E501
        """Get simulation status.  # noqa: E501

        Get simulation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulation_status(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInt id: Simulation ID (required)
        :param bool clear_progress_events: Clear progress events, by default true.
        :return: SimulationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_simulation_status_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_simulation_status_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_simulation_status_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get simulation status.  # noqa: E501

        Get simulation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_simulation_status_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInt id: Simulation ID (required)
        :param bool clear_progress_events: Clear progress events, by default true.
        :return: SimulationStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'clear_progress_events']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_simulation_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_simulation_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'clear_progress_events' in params:
            query_params.append(('clear_progress_events', params['clear_progress_events']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimulationStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_store(self, **kwargs):  # noqa: E501
        """Get the contents of the data store.  # noqa: E501

        Get the contents of the data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_store_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_store_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_store_with_http_info(self, **kwargs):  # noqa: E501
        """Get the contents of the data store.  # noqa: E501

        Get the contents of the data store.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_store_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_store" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/store', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_system(self, uuid, **kwargs):  # noqa: E501
        """Retrieve one system.  # noqa: E501

        Retrieve one system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: System UUID (required)
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_system_with_http_info(uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_system_with_http_info(uuid, **kwargs)  # noqa: E501
            return data

    def get_system_with_http_info(self, uuid, **kwargs):  # noqa: E501
        """Retrieve one system.  # noqa: E501

        Retrieve one system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_system_with_http_info(uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str uuid: System UUID (required)
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='System',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_aux_variable_names(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the aux_variable names in a decision problem.  # noqa: E501

        aux_variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_aux_variable_names(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_aux_variable_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_aux_variable_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def list_aux_variable_names_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the aux_variable names in a decision problem.  # noqa: E501

        aux_variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_aux_variable_names_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_aux_variable_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_aux_variable_names`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `list_aux_variable_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/aux_variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_cached_simulation_results(self, **kwargs):  # noqa: E501
        """Return the simulations with cached results.  # noqa: E501

        Return the simulations with cached results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cached_simulation_results(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_cached_simulation_results_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_cached_simulation_results_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_cached_simulation_results_with_http_info(self, **kwargs):  # noqa: E501
        """Return the simulations with cached results.  # noqa: E501

        Return the simulations with cached results.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_cached_simulation_results_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_cached_simulation_results" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/cache_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_decision_problems(self, id, **kwargs):  # noqa: E501
        """Retrieve the decision problem names in a simulation.  # noqa: E501

        Retrieve the decision problem names in a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_decision_problems(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_decision_problems_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_decision_problems_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_decision_problems_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the decision problem names in a simulation.  # noqa: E501

        Retrieve the decision problem names in a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_decision_problems_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_decision_problems" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_decision_problems`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/decision_problems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dual_names(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the dual names in a decision problem.  # noqa: E501

        dual names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dual_names(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dual_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_dual_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def list_dual_names_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the dual names in a decision problem.  # noqa: E501

        dual names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dual_names_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dual_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_dual_names`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `list_dual_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/duals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_expression_names(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the expression names in a decision problem.  # noqa: E501

        expression names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_expression_names(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_expression_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_expression_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def list_expression_names_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the expression names in a decision problem.  # noqa: E501

        expression names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_expression_names_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_expression_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_expression_names`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `list_expression_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/expressions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_parameter_names(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the parameter names in a decision problem.  # noqa: E501

        parameter names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_parameter_names(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_parameter_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_parameter_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def list_parameter_names_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the parameter names in a decision problem.  # noqa: E501

        parameter names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_parameter_names_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_parameter_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_parameter_names`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `list_parameter_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_simulation_statuses(self, **kwargs):  # noqa: E501
        """Check status for all simulations.  # noqa: E501

        Check status for all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_simulation_statuses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Filter results by simulations with this status.
        :param bool clear_progress_events: Clear progress events, by default true.
        :return: SimulationStatuses
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_simulation_statuses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_simulation_statuses_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_simulation_statuses_with_http_info(self, **kwargs):  # noqa: E501
        """Check status for all simulations.  # noqa: E501

        Check status for all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_simulation_statuses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Filter results by simulations with this status.
        :param bool clear_progress_events: Clear progress events, by default true.
        :return: SimulationStatuses
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'clear_progress_events']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_simulation_statuses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'clear_progress_events' in params:
            query_params.append(('clear_progress_events', params['clear_progress_events']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SimulationStatuses',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_simulations(self, **kwargs):  # noqa: E501
        """Retrieve all simulations.  # noqa: E501

        Retrieve all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_simulations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListSimulationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_simulations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_simulations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_simulations_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all simulations.  # noqa: E501

        Retrieve all simulations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_simulations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListSimulationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_simulations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSimulationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_systems(self, **kwargs):  # noqa: E501
        """Retrieve all systems.  # noqa: E501

        Retrieve all systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_systems(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListSystemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_systems_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_systems_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_systems_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve all systems.  # noqa: E501

        Retrieve all systems.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_systems_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ListSystemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_systems" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListSystemsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_variable_names(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the variable names in a decision problem.  # noqa: E501

        variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_variable_names(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_variable_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.list_variable_names_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def list_variable_names_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the variable names in a decision problem.  # noqa: E501

        variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_variable_names_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Decision problem name (required)
        :return: ListNamesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_variable_names" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_variable_names`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `list_variable_names`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/variables', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListNamesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def load_store(self, body, **kwargs):  # noqa: E501
        """Load saved data.  # noqa: E501

        Load saved data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_store(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Store body: Saved data (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.load_store_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.load_store_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def load_store_with_http_info(self, body, **kwargs):  # noqa: E501
        """Load saved data.  # noqa: E501

        Load saved data.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.load_store_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Store body: Saved data (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method load_store" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `load_store`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/store', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_simulation(self, body, **kwargs):  # noqa: E501
        """Store a power simulation.  # noqa: E501

        Store a power simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_simulation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Simulation body: Power simulation (required)
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_simulation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_simulation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_simulation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Store a power simulation.  # noqa: E501

        Store a power simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_simulation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Simulation body: Power simulation (required)
        :return: Simulation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Simulation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_system(self, body, **kwargs):  # noqa: E501
        """Load a power system from a file path.  # noqa: E501

        Load a power system from a file path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_system(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSystemBody body: Post system body (required)
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_system_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_system_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_system_with_http_info(self, body, **kwargs):  # noqa: E501
        """Load a power system from a file path.  # noqa: E501

        Load a power system from a file path.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_system_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostSystemBody body: Post system body (required)
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_system" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_system`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='System',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_system_case(self, category, name, **kwargs):  # noqa: E501
        """Load a power system with PowerSystemCaseBuilder.  # noqa: E501

        Load a power system with PowerSystemCaseBuilder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_system_case(category, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: System category (required)
        :param str name: System name (required)
        :param bool force_build: Force build of system instead of de-serializataion.
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_system_case_with_http_info(category, name, **kwargs)  # noqa: E501
        else:
            (data) = self.post_system_case_with_http_info(category, name, **kwargs)  # noqa: E501
            return data

    def post_system_case_with_http_info(self, category, name, **kwargs):  # noqa: E501
        """Load a power system with PowerSystemCaseBuilder.  # noqa: E501

        Load a power system with PowerSystemCaseBuilder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_system_case_with_http_info(category, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: System category (required)
        :param str name: System name (required)
        :param bool force_build: Force build of system instead of de-serializataion.
        :return: System
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category', 'name', 'force_build']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_system_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category' is set
        if ('category' not in params or
                params['category'] is None):
            raise ValueError("Missing the required parameter `category` when calling `post_system_case`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `post_system_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []
        if 'force_build' in params:
            query_params.append(('force_build', params['force_build']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/systems/{category}/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='System',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_optimizer_stats(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the optimizer stats for a problem.  # noqa: E501

        Retrieve the optimizer stats for a problem.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_optimizer_stats(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_optimizer_stats_with_http_info(id, problem_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_optimizer_stats_with_http_info(id, problem_name, **kwargs)  # noqa: E501
            return data

    def read_optimizer_stats_with_http_info(self, id, problem_name, **kwargs):  # noqa: E501
        """Retrieve the optimizer stats for a problem.  # noqa: E501

        Retrieve the optimizer stats for a problem.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_optimizer_stats_with_http_info(id, problem_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_optimizer_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_optimizer_stats`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_optimizer_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/otimizer_stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_realized_aux_variable_results(self, id, problem_name, aux_variable_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a aux_variable.  # noqa: E501

        aux_variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_aux_variable_results(id, problem_name, aux_variable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str aux_variable_name: aux_variable name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_realized_aux_variable_results_with_http_info(id, problem_name, aux_variable_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_realized_aux_variable_results_with_http_info(id, problem_name, aux_variable_name, **kwargs)  # noqa: E501
            return data

    def read_realized_aux_variable_results_with_http_info(self, id, problem_name, aux_variable_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a aux_variable.  # noqa: E501

        aux_variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_aux_variable_results_with_http_info(id, problem_name, aux_variable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str aux_variable_name: aux_variable name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name', 'aux_variable_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_realized_aux_variable_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_realized_aux_variable_results`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_realized_aux_variable_results`")  # noqa: E501
        # verify the required parameter 'aux_variable_name' is set
        if ('aux_variable_name' not in params or
                params['aux_variable_name'] is None):
            raise ValueError("Missing the required parameter `aux_variable_name` when calling `read_realized_aux_variable_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501
        if 'aux_variable_name' in params:
            path_params['aux_variable_name'] = params['aux_variable_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/aux_variables/{aux_variable_name}/realized_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_realized_dual_results(self, id, problem_name, dual_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a dual.  # noqa: E501

        dual names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_dual_results(id, problem_name, dual_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str dual_name: dual name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_realized_dual_results_with_http_info(id, problem_name, dual_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_realized_dual_results_with_http_info(id, problem_name, dual_name, **kwargs)  # noqa: E501
            return data

    def read_realized_dual_results_with_http_info(self, id, problem_name, dual_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a dual.  # noqa: E501

        dual names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_dual_results_with_http_info(id, problem_name, dual_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str dual_name: dual name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name', 'dual_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_realized_dual_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_realized_dual_results`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_realized_dual_results`")  # noqa: E501
        # verify the required parameter 'dual_name' is set
        if ('dual_name' not in params or
                params['dual_name'] is None):
            raise ValueError("Missing the required parameter `dual_name` when calling `read_realized_dual_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501
        if 'dual_name' in params:
            path_params['dual_name'] = params['dual_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/duals/{dual_name}/realized_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_realized_expression_results(self, id, problem_name, expression_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a expression.  # noqa: E501

        expression names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_expression_results(id, problem_name, expression_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str expression_name: expression name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_realized_expression_results_with_http_info(id, problem_name, expression_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_realized_expression_results_with_http_info(id, problem_name, expression_name, **kwargs)  # noqa: E501
            return data

    def read_realized_expression_results_with_http_info(self, id, problem_name, expression_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a expression.  # noqa: E501

        expression names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_expression_results_with_http_info(id, problem_name, expression_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str expression_name: expression name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name', 'expression_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_realized_expression_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_realized_expression_results`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_realized_expression_results`")  # noqa: E501
        # verify the required parameter 'expression_name' is set
        if ('expression_name' not in params or
                params['expression_name'] is None):
            raise ValueError("Missing the required parameter `expression_name` when calling `read_realized_expression_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501
        if 'expression_name' in params:
            path_params['expression_name'] = params['expression_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/expressions/{expression_name}/realized_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_realized_parameter_results(self, id, problem_name, parameter_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a parameter.  # noqa: E501

        parameter names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_parameter_results(id, problem_name, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str parameter_name: parameter name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_realized_parameter_results_with_http_info(id, problem_name, parameter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_realized_parameter_results_with_http_info(id, problem_name, parameter_name, **kwargs)  # noqa: E501
            return data

    def read_realized_parameter_results_with_http_info(self, id, problem_name, parameter_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a parameter.  # noqa: E501

        parameter names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_parameter_results_with_http_info(id, problem_name, parameter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str parameter_name: parameter name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name', 'parameter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_realized_parameter_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_realized_parameter_results`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_realized_parameter_results`")  # noqa: E501
        # verify the required parameter 'parameter_name' is set
        if ('parameter_name' not in params or
                params['parameter_name'] is None):
            raise ValueError("Missing the required parameter `parameter_name` when calling `read_realized_parameter_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501
        if 'parameter_name' in params:
            path_params['parameter_name'] = params['parameter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/parameters/{parameter_name}/realized_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_realized_variable_results(self, id, problem_name, variable_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a variable.  # noqa: E501

        variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_variable_results(id, problem_name, variable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str variable_name: Variable name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_realized_variable_results_with_http_info(id, problem_name, variable_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_realized_variable_results_with_http_info(id, problem_name, variable_name, **kwargs)  # noqa: E501
            return data

    def read_realized_variable_results_with_http_info(self, id, problem_name, variable_name, **kwargs):  # noqa: E501
        """Retrieve the realized results for a variable.  # noqa: E501

        variable names in a decision problem a simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_realized_variable_results_with_http_info(id, problem_name, variable_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Simulation ID (required)
        :param str problem_name: Problem name (required)
        :param str variable_name: Variable name (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'problem_name', 'variable_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_realized_variable_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `read_realized_variable_results`")  # noqa: E501
        # verify the required parameter 'problem_name' is set
        if ('problem_name' not in params or
                params['problem_name'] is None):
            raise ValueError("Missing the required parameter `problem_name` when calling `read_realized_variable_results`")  # noqa: E501
        # verify the required parameter 'variable_name' is set
        if ('variable_name' not in params or
                params['variable_name'] is None):
            raise ValueError("Missing the required parameter `variable_name` when calling `read_realized_variable_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'problem_name' in params:
            path_params['problem_name'] = params['problem_name']  # noqa: E501
        if 'variable_name' in params:
            path_params['variable_name'] = params['variable_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/problems/{problem_name}/variables/{variable_name}/realized_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_simulation(self, body, **kwargs):  # noqa: E501
        """Start a power simulation.  # noqa: E501

        Start a power simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_simulation(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Simulation body: Power simulation (required)
        :param str output_dir: Simulation output directory
        :param int poll_interval: Poll interval on which to check for status.
        :return: StartSimulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_simulation_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.start_simulation_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def start_simulation_with_http_info(self, body, **kwargs):  # noqa: E501
        """Start a power simulation.  # noqa: E501

        Start a power simulation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_simulation_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Simulation body: Power simulation (required)
        :param str output_dir: Simulation output directory
        :param int poll_interval: Poll interval on which to check for status.
        :return: StartSimulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'output_dir', 'poll_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `start_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'output_dir' in params:
            query_params.append(('output_dir', params['output_dir']))  # noqa: E501
        if 'poll_interval' in params:
            query_params.append(('poll_interval', params['poll_interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartSimulationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_stored_simulation(self, id, **kwargs):  # noqa: E501
        """Start a simulation that was previously stored.  # noqa: E501

        Start a simulation that was previously stored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_stored_simulation(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Simulation name (required)
        :param str output_dir: Simulation output directory
        :param int poll_interval: Poll interval on which to check for status.
        :return: StartSimulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_stored_simulation_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.start_stored_simulation_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def start_stored_simulation_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start a simulation that was previously stored.  # noqa: E501

        Start a simulation that was previously stored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_stored_simulation_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Simulation name (required)
        :param str output_dir: Simulation output directory
        :param int poll_interval: Poll interval on which to check for status.
        :return: StartSimulationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'output_dir', 'poll_interval']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_stored_simulation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `start_stored_simulation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'output_dir' in params:
            query_params.append(('output_dir', params['output_dir']))  # noqa: E501
        if 'poll_interval' in params:
            query_params.append(('poll_interval', params['poll_interval']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/simulations/{id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartSimulationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
